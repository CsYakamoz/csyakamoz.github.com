<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on CsYakamoz`s Blog</title>
    <link>https://csyakamoz.github.io/tags/javascript/</link>
    <description>Recent content in javascript on CsYakamoz`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Mar 2021 14:37:33 +0800</lastBuildDate><atom:link href="https://csyakamoz.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 中 isNaN 和 Number.isNaN 的区别</title>
      <link>https://csyakamoz.github.io/post/javascript-isnan-vs-number.isnan/</link>
      <pubDate>Tue, 16 Mar 2021 14:37:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-isnan-vs-number.isnan/</guid>
      <description>isNaN vs Number.isNaN isNaN: 判断参数是否为 NaN 本身, 或者无法转为数字.
Number.isNaN: 仅判断参数是否为 NaN 本身(完全匹配, 类似于 ===).
例如:
isNaN({}); // &amp;lt;- true, {} is not a number // {} 无法转为数字  isNaN(&amp;#34;ponyfoo&amp;#34;); // &amp;lt;- true, &amp;#34;ponyfoo&amp;#34; is not a number // &amp;#34;ponyfoo&amp;#34; 无法转为数字  isNaN(NaN); // &amp;lt;- true, NaN is not a number // NaN 本身  isNaN(&amp;#34;pony&amp;#34; / &amp;#34;foo&amp;#34;); // &amp;lt;- true, &amp;#34;pony&amp;#34;/&amp;#34;foo&amp;#34; is NaN, NaN is not a number // &amp;#34;pony&amp;#34; 和 &amp;#34;foo&amp;#34; 皆无法转为数字, 故 &amp;#39;/&amp;#39; 操作符的结果是 NaN  isNaN(&amp;#34;123&amp;#34;); // &amp;lt;- false, &amp;#34;123&amp;#34; 可转为数字  Number.</description>
    </item>
    
    <item>
      <title>Javascript this 的指向</title>
      <link>https://csyakamoz.github.io/post/javascript-this/</link>
      <pubDate>Wed, 09 Sep 2020 16:14:29 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-this/</guid>
      <description>// Notice: the environment is Node.js  global.val = &amp;#34;global&amp;#34;; this.val = &amp;#34;exports&amp;#34;; function normalFun() { console.log(this.val); } const funcExpression = function () { console.log(this.val); }; const arrowFun = () =&amp;gt; { console.log(this.val); }; const scope = { val: &amp;#34;obj&amp;#34;, a: function () { console.log(this.val); }, b: () =&amp;gt; { console.log(this.val); }, c: function () { return () =&amp;gt; { console.log(this.val); }; }, d: function () { return function () { console.</description>
    </item>
    
    <item>
      <title>forEach With Async Function in Js</title>
      <link>https://csyakamoz.github.io/post/javascript-foreach-with-async-func/</link>
      <pubDate>Wed, 09 Sep 2020 14:05:20 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-foreach-with-async-func/</guid>
      <description>const sleep = (ms) =&amp;gt; new Promise((resolve) =&amp;gt; setTimeout(() =&amp;gt; resolve(ms), ms * 1000)); 假设我们需要对数组中的三个元素进行异步操作，而且要按顺序。
即，对数组中的元素按顺序调用异步函数（本文为 sleep)，我们也许会用 Array.prototype.forEach 写出下面的代码：
(async () =&amp;gt; { const begin = Date.now(); const arr = [1, 2, 3]; arr.forEach(async (num) =&amp;gt; { console.log(await sleep(num)); }); console.log(&amp;#34;finish&amp;#34;); const end = Date.now(); console.log(`time: ${end - begin}`); })(); 我们期待的结果为：
1 2 3 finish time: x // x &amp;gt;= 6000 但执行上述代码后，你将获得如下结果：
finish time: x // x &amp;lt; 1000 1 2 3 我们先看看 Array.</description>
    </item>
    
    <item>
      <title>Node.js 创建本地模块</title>
      <link>https://csyakamoz.github.io/post/nodejs-crate-local-package/</link>
      <pubDate>Wed, 09 Sep 2020 11:00:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-crate-local-package/</guid>
      <description>问题来源 在编写代码时，个人习惯会把通用实用模块放在项目根目录下
因为是通用实用模块，若项目层级较多，那么层级较深的文件引用该模块时，会出现这样的代码：
const Utils = require(&amp;#34;../../../../../../../utils&amp;#34;); 这么多的 .., 如果写少或写多一个 .., 就会报错
Oh, it makes me uncomfortable 😑
因此，需求是可以用简单的路径引用通用实用模块
Solution One 使用 module-alias, 简洁且易用
个人认为只有一个缺点 - 它更改 Module._resolveFilename 方法
Solution Two npm 和 yarn 现已支持安装本地模块
首先需要为本地模块添加 package.json 文件
 对于 package.json, 其 name, version 是必需的
 本地模块的名字为 package.json 的 name 字段，而不是本地模块所处目录名
假设本地模块相对于项目根目录的路径是 ./local-package-dir, 其在 package.json 文件中的 name 为 local-package
则安装本地模块的方法如下：
# 在 node_modules 中创建软链 local-package 指向 ../local-package-dir npm install ./local-package-dir # 拷贝 .</description>
    </item>
    
    <item>
      <title>Javascript 函数传参类型</title>
      <link>https://csyakamoz.github.io/post/javascript-function-parameter-type/</link>
      <pubDate>Wed, 09 Sep 2020 10:54:59 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-function-parameter-type/</guid>
      <description>曾经我一度将 javascript 函数传参类型分为两种：
 基本类型：值传递 引用类型：引用传递  后来我发现，其实都是值传递;
先说明为啥曾经认为引用类型，是引用传递：
function demo(obj) { obj.foo = &amp;#34;foo&amp;#34;; } let variable = {}; console.log(variable); // {}  demo(variable); console.log(variable); // { foo: &amp;#39;foo&amp;#39; } 外部向函数 demo 传递实参 (variable);
函数进行操作：向形参 (obj) 添加一个属性 (foo), 其值为 foo;
um&amp;hellip;, 函数内部的操作，会影响外部的变量，这是很像引用传递，但我们再看个例子：
function demo(obj) { obj = { foo: &amp;#34;foo&amp;#34; }; obj.bar = &amp;#34;bar&amp;#34;; } let variable = {}; console.log(variable); // {}  demo(variable); console.log(variable); // {} 为什么第二个输出依旧是 {} ?</description>
    </item>
    
    <item>
      <title>JavaScript 遍历对象属性顺序</title>
      <link>https://csyakamoz.github.io/post/javascript-iterate-object-property-order/</link>
      <pubDate>Wed, 09 Sep 2020 10:37:51 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/javascript-iterate-object-property-order/</guid>
      <description>问题来源 /** * @param {object} obj * @returns {any[]} */ function getValues(obj) { // some code or none  return Object.values(obj); } const [val0, val1, ..., valN] = getValues(obj); doSomethingFor0(val0); doSomethingFor1(val1); ... doSomethingForN(valN); getValues 函数参数是对象，返回值是数组
调用者传入对象，再对函数返回的数组，进行如下操作：
 对下标为 0 的元素做某事 0 对下标为 1 的元素做某事 1 &amp;hellip; 对下标为 N 的元素做某事 N  在这里，调用者认为，该数组元素排序顺序会如预期所想（声明顺序，插入顺序等等）
实际上，该数组元素排序顺序依赖于遍历对象属性顺序, 但遍历对象属性顺序有时并非等价于对象的声明（插入）顺序，故导致可能出现非预期结果
顺序规则 在 Google 查找相关资料后及个人测试，得到如下结果：
先以三个区间划分，然后区间内再各自排序
 非负整数（不包括 n.0 这种）区间，按照从小到大排序 普通的属性名区间，按照声明（插入）顺序排序 Symbol 区间，按照声明（插入）顺序排序  /** * Object.values() * Object.</description>
    </item>
    
    <item>
      <title>编码风格</title>
      <link>https://csyakamoz.github.io/post/coding-style/</link>
      <pubDate>Wed, 09 Sep 2020 10:32:18 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/coding-style/</guid>
      <description>ESLint  ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.
 以下风格都会尽量补充对应的 eslint 规则（如果有且被我发现的话 😑
Notice: 请优先以团队约定为准！
缩进使用空格而不是制表符 尽管制表符更省空间，但还是更喜欢空格
 one tab is equal to 2, 4, 8 space
  no-tabs  坚持使用分号 纵然很多人依旧坚持不使用分号，但我就喜欢加分号，就这么滴。
 semi  坚持使用大括号 即使只有一条语句，也依旧要使用大括号；
同时，else 与 if 的 } 处在统一行；
// bad if (test) return false; else return true; // bad if (test) return false; else return true; // bad if (test) { return false; } else { return true; } // good if (test) { return false; } else { return true; }  curly brace-style nonblock-statement-body-position  const 优于 let, 弃用 var var 的坏处，此处不一一阐述；</description>
    </item>
    
    <item>
      <title>Node.js 调用微信小程序图片校验接口</title>
      <link>https://csyakamoz.github.io/post/nodejs-call-wechat-img-sec-check-api/</link>
      <pubDate>Wed, 09 Sep 2020 10:21:33 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-call-wechat-img-sec-check-api/</guid>
      <description>const fs = require(&amp;#34;fs&amp;#34;); const request = require(&amp;#34;request&amp;#34;); request.post( { uri: &amp;#34;https://api.weixin.qq.com/wxa/img_sec_check?access_token=ACCESS_TOKEN&amp;#34;, formData: { // 方法 1  media: fs.createReadStream(&amp;#34;path_to_img&amp;#34;), // 方法 2  attachments: [ // 只认下标为 0 的  fs.createReadStream(&amp;#34;path_to_img&amp;#34;), // 下标 1 及之后的会被微信忽略  ..., ], // 方法 3  media: { value: buffer, options: { // 必须有 filename, 值可任意但不能为空串  filename: &amp;#34;default&amp;#34;, // contentType 可有可无，且值任意  contentType: &amp;#34;image/jpeg&amp;#34;, }, }, // 方法 4  media: request.get(&amp;#34;uri_to_img&amp;#34;), }, }, (error, resp, body) =&amp;gt; { if (error) { console.</description>
    </item>
    
    <item>
      <title>Node.js 支持的编码</title>
      <link>https://csyakamoz.github.io/post/nodejs-supported-encoding/</link>
      <pubDate>Wed, 09 Sep 2020 10:19:07 +0800</pubDate>
      
      <guid>https://csyakamoz.github.io/post/nodejs-supported-encoding/</guid>
      <description> ascii utf8 utf16le ucs2: alias of utf16le base64 latin1 binary: alias for latin1 hex  参考  List of encodings that Node.js supports Buffers and Character Encodings  </description>
    </item>
    
  </channel>
</rss>
